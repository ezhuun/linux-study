2019.02.27

http://lectureblue.pe.kr
tim

* 서버쪽 스크립트(JSP, PHP, ASP.NET)
   - 인터넷 브러우저가 읽어서 해석을 할 수가 없고 서버에 설치된 
     서블릿 컨테이너(WAS: Tomcat, Resin, JBoss, Webspere, Weblogic...)에서
     실행됩니다.
 
   - HTML은 자료를 처리, 저장, 검색하는 기능이 없고 단지 출력하는 기능만
     가지고 있습니다. 따라서 이런 데이터를 처리하려면 DBMS(Oracle, DB2, MySQL)
     같은 데이터베이스가 필요하며, 이 데이터베이스에 접속하기위해서 
     서버스크립트(JSP, PHP, ASP.NET)가 필요합니다.
 
   - HTML은 보안성이 없음으로 DBMS에 바로 접속할 수 없습니다. HTML은 누구나
     소스를 열어볼 수 있습니다. 따라서 DBMS에 접속하려면 반드시 서버스크립트를
     써야합니다.
 
   - JSP: SUN의 서버쪽 스크립트 기술, 모든 운영체제 지원, JAVA 기반, 
     Servlet Container(WAS)를 설치해야 실행 할 수 있습니다.
     대부분의 대기업을 포함한 모든 분야의 기업에서 폭 넓게 사용, 
     전자 정부 Framework의 기반 기술.
 
 
 
 
* JSP 스크립트 기본 문법
     - WEB 환경에서 JAVA를 이용한 DBMS 접근을 처리 합니다.
     - Java Logic 처리를 구현합니다.
     - JAVA를 기반으로하는 문법 입니다.
     - JSP 고유의 태그가 존재합니다.
     - JSP의 출력 결과를 HTML과 CSS로 편집하여 출력 합니다.
 
 
1. 스크립틀릿의 이해
 
   - 일반적인 java 코드가 쓰임: <% ... JAVA 코드 명시 ... %>
 
 
 
2. 선언문(특별한 경우만 사용, 빈즈로 대체하여 사용함으로 권장하지 않음)
 
   - 메소드(함수) 선언: <%! ...JAVA 메소드... %>
 
 
 
3. 표현식(Expression) 
   - 단순 출력 기능.

   - <% System.out.print(hap(10, 20)); %>: 콘솔에 출력 
     <% out.print(hap(10, 20)); %>       : JSP 출력
     <%=hap(10, 20)%> : JSP 출력, 문장 종결자(';')을 사용할 수 없고, 오로지
                        하나의 값만 출력할 수 있습니다.
 
 
 
4. 주석
   - <% 
        //            
        /*...~~~...*/ 
     %>


* Page 지시자(Directive)
  
   - contentType: jsp의 출력 형식 지정, 문자 셋을 지정합니다. 
     . 형식: contentType="text/html; charset=UTF-8" 
       <%@ page contentType="text/html; charset=UTF-8" %> 
     . JSP처리 결과가 HTML임으로 MIME Type을 'text/html'과 문자 코드(UTF-8)를 
       선언. 
     . MIME Type: 브러우저가 출력하는 데이터의 종류를 나타낸 코드값, 
       브러우저에게 데이터 타입을 알려줌 
       예)image/jpg는 이미지가 출력됨 
     . 문자 코드는 UTF-8이 표준화 되어가고 있음으로 권장. 
     . XML, Ajax 사용시 주로 UTF-8를 선언합니다. 
     . EUC-KR, UTF-8 중 어떤 문자셋이든 브러우저가 자동으로 한글 코드를 적용시킴.  
     . 대소문자 상관 없음(자료실의 한글 파일명은 UTF-8을 사용할 것). 
     . HTML 태그의 META태그도 일치시켜야함(브러우저용). 
       <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
       <meta http-equiv="Content-Type" content="text/html; charset=EUC-KR"> 

   - import: 패키지의 import, 중복 사용가능 합니다. 
     . 자바에서 패키지를 사용하겠다고 선언하는 것과 같습니다. 
     . Exam) <%@ page import="java.util.*" %> 

   - pageEncoding: jsp1.2에 추가된 규약으로 jsp페이지의 문자셋 형식을 
     지정합니다. 
     <%@ page pageEncoding="UTF-8" contentType="text/html" %> 




* 내부 객체의 이해 
   - 개발자가 객체를 생성하지 않아도 jsp페이지가 서블릿 컨테이너(Tomcat)로 
     로딩되면 Tomcat등 서버가 자동으로 생성하는 객체를 말합니다. 
     따라서 개발자는 반복적인 작업을 줄이고 필요한 작업만 할수 있게 됩니다. 

   - jsp페이지는 Web서버 및 Servlet Container라고 하는 복잡한 환경에서 실행이 
     되기 때문에, 실행중에 여러가지 상태정보를 가지고 있어야 하는데, 
     이런 경우에 사용되는 객체들이 내부 객체들입니다. 

   - 내부 객체로 인해 개발자는 좀더 쉽게 JSP 프로그래밍이 가능함. 


1. request 내부 객체 
   - javax.servlet.http.HttpServletRequest Interface를 Tomcat등 
     서버가 구현한 객체, 자동화된 객체, 개발자는 사용만함. 

   - <FORM>에서 입력되어 브러우저가 전송한 데이터를 Tomcat 서버의 JSP에서 
     처리할수 있도록 객체로 가져오는 역활을 합니다. 

   - 접속한 클라이언트에 대한 정보도 알 수 있습니다. 

   - 주소 표시줄에 한글을 직접 입력시 MS 익스플로러 및 이클립스 내부 브러우저는
     한글이 깨집니다.(★, Chrome, Swing 브러우저는 안깨짐)

   - ?:값을 명시한다는 뜻

   - &: 접속자가 보내는 값이 2개 이상인 경우  

   - HTML은 Spacebar 공백이 무시됨으로 공백한칸을 표현하기위해 ' '을 사용.

2. response 내부 객체 
   - javax.servlet.http.HttpServletResponse Interface를 Tomcat등 
     서버가 구현한 객체, 자동화된 객체, 개발자는 사용만함. 

   - 처리 결과를 클라이언트(웹 브러우저)에게 출력할 목적을 가지고 있습니다.  

   - out 객체는 response 객체로부터 생성합니다. 

   - sendRedirect(): 데이터 처리를 한후 특정 페이지로 자동으로 주소 이동. 

3. out 내부 객체 
   - javax.servlet.jsp.JspWriter Class의 객체 

   - out 객체는 response객체에서 생성된다. 

   - out.print("접속에 성공했습니다.")   
     . HTML이 모두 한줄로 생성됨, 소스 분석 어려움 

   - out.println("접속에 성공했습니다.") 
     . 호출될 때마다 HTML코드를 생성하고 새로운 라인으로 이동함. 

   - System.out.print(), System.out.println()은 디버깅 정보를 콘솔창에
     출력하는 용도로 사용합니다.
     (변수의 변화를 추적하기 위한 용도, 관리, 에러 수정목적) 

4. application 내부 객체 
   - javax.servlet.ServletContext 인터페이스의 구현 객체 

   - 서블릿이 서블릿 컨테이너(Tomcat)에서 실행 될 때의 환경 정보를 저장 

   - 절대 경로 추출시 JSP 형식 
     String upDir = "/pds/storage"; 
     upDir = application.getRealPath(upDir); 






* Form 전송 방식 
1. HTML Form의 형태 
   - 데이터를 입력받을 목적으로 사용하는 태그. 

<FORM name="frm" action="./sungjuk_proc.jsp" method = "GET/POST"> 

1) name  : 폼 이름 

2) action: 폼에서 입력받은 데이터를 보내(전송)는 서버의 주소로써 
           인터넷 브러우저는 주소상에 도메인 생략시 도메인을 자동으로  
           연결하여 전송합니다. 
           예)  
           action="./sungjuk_proc.jsp"  
           ▶ 현재 브러우저로 로딩된 파일과 같은 폴더에있는 jsp로 전송 (*)

           action="../sungjuk_proc.jsp"  
           ▶ 현재 폴더의 상위 폴더에 있는 파일로 전송

           action="../object/sungjuk_proc.jsp" 
           ▶ 현재 폴더의 상위폴더로 나간 후 object폴더안으로 이동하여 전송  

           action="http://172.16.4.1:8000/object/sungjuk_proc.jsp" 
           ▶ 전체 IP를 직접 기록한 경우 

           action="http://www.test.co.kr/object/sungjuk_proc.jsp"  
           ▶ 전체 도메인을 직접 기록한 경우


3) method: 전송 방식 
   GET: 데이터 조회용(SQL: SELECT)   
   POST: 데이터 수정용(SQL: INSERT, UPDATE, DELETE) 

   * 특정 기업은 요청을 전부 POST로 요구하는 기업도 있음, POST만 써도 개발 가능



2. GET 전송 방식 

   - 서버의 데이터를 변경할 목적이 아닌 조회의 목적으로 사용(SQL: SELECT) 

   - 전송할 데이터를 문자열 형태로 URL의 뒤에 인수로 붙여서 전송합니다. 
     따라서 보안성이 없어 누구나 전송 내용을 볼 수 있습니다. 
     Form 태그에서의 'GET'방식은 서버로 전송시 서버의 처리가 지연될 경우 
    중복해서 데이터 전송이 발생합니다.  

   - A 태그를 이용할 경우 일반적으로 GET방식 전송만 가능하나 
     Javascript를 이용하면 POST 방식으로 전송이 가능함. 

   - 4KB이상의 파라미터 문자열은 전송할 수 없음으로 대용량 전송이 어려움.

   - 주소를 공개할 목적으로 사용하는 경우


1) 주소와 데이터의 구분 
   - ?: 전송되는 데이터(변수)의 시작 
   - &: 변수가 2개 이상일 경우 구분 


2) 전송 예 

http://localhost:8000/object/form/select2_proc.jsp?city=모스크바&period=1000박1001일&img=ro38.jpg 



3. POST 전송 방식 

   - 서버의 데이터를 변경할 목적으로 가지고 있음(SQL: INSERT, UPDATE, DELETE) 

   - 파일의 형태로 전송됨으로 URL상에 나타나지않아 보안성이 있습니다. 

   - GET방식에 비해서 대용량의 데이터를 전송할 수 있습니다. 

   - 일반적으로 Form은 post 방식으로 전송됩니다. 

   - 한글 인코딩 처리로 한글깨짐을 방지합니다. 
   
    <% request.setCharacterEncoding("utf-8"); %>
