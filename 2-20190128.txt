2019.01.25

 * Collections Framework
   - 배열의 단점을 개선한 클래스로 객체만 저장할 수 있다
   - 배열의 단점인 메모리 낭비를 피할수 있는 구조
   - 동적인 크기 변경이 가능
   - 자료를 효율적으로 정리하는것을 자료구조(Data structure)라 한다
   - 자료구조 방법에는 Set계열, List계열, Map계열이 있다.
   - java는 java.util 패키지의 자바 컬렉션(JCF)에서 자료구조 방법을 제공


1. Set  
  - 순서가 없고 중복안됨 
  - HashSet, TreeSet  


2. List  
  - 순서가 있고 중복이 가능하다. 
  - ArrayList,  LinkedList, Vector 


3. Map 
   - Key, value 한쌍 
   - HashMap, Hashtable  
   - put 메서드로 입력합니다. 
   - 중복된 키 값을 허용하지 않습니다. 만약 사용하게되면 기존의 값이 삭제된다. 
   - 검색 결과가 없으면 null을 리턴한다. 



====================================set example====================================
import java.util.*; 
public class SetTest { 
    public static void main(String[] args) { 
        HashSet list=new HashSet(); 
 
        list.add("lee");//0 
        list.clear();//모두 제거 
        list.add("cho");//0 
        list.add("kim");//1 
        list.add("chung");//2 
        list.add("min");//3 
        list.add("chung");//2과 동일 
 
        System.out.println("set 사이즈:"+list.size());//size() 
        System.out.println(list.contains("chung")); 
 
        list.remove("kim");//1제거 
 
        System.out.println("kim 제거후 set 사이즈:"+list.size()); 
        System.out.println("Iterator객체 이용해서 set출력"); 
        print(list.iterator()); 
 
        System.out.println("배열을 이용해서 set출력"); 
        print(list.toArray()); 
    } 
 
    public static void print(Iterator iter){ 
        while(iter.hasNext()){ 
            String str=(String)iter.next(); 
            System.out.println(str); 
        } 
    }// 
    public static void print(Object [] obj){ 
        int count=obj.length; 
        for(int i=0;i<count;i++){ 
            System.out.println(obj[i]); 
        } 
    }// 
}


====================================list example====================================
import java.util.*; 
public class ListTest1 { 
    public static void main(String[] args) { 
        ArrayList list=new ArrayList(); 
        list.add("lee");//0 
        list.clear();//모두 제거 
        list.add("cho");//0 
        list.add("kim");//1 
        list.add("chung");//2 
        list.add("min");//3 
        list.add("chung");//4 
        System.out.println("ArrayList 사이즈:"+list.size());//size() 
        System.out.println(list.contains("chung")); 
        list.remove("kim");//1제거 
        list.remove(3);//chung 제거 
        System.out.println("ArrayList 사이즈:"+list.size()); 
        System.out.println("min이 있는 위치값:"+list.indexOf("min")); 
 
        System.out.println("Iterator를 이용해서 출력"); 
        print(list); 
        System.out.println("배열를 이용해서 출력"); 
        print(list.toArray()); 
        //ArrayList 에서 0에서 1까지의 데이타 추출 
        List sublist=list.subList(0,2);//0~2-1까지 
        System.out.println("추출된 데이타만 출력"); 
        print(sublist); 
        System.out.println("for문을 이용해서 출력"); 
        printGet(list); 
    } 
    public static void print(List list){ 
        Iterator iter=list.iterator(); 
            while(iter.hasNext()){ 
            String str=(String)iter.next(); 
            System.out.println(str); 
        } 
    }// 
    public static void print(Object [] obj){ 
        int count=obj.length; 
        for(int i=0;i<count;i++){ 
            System.out.println(obj[i]); 
        } 
    }// 
    public static void printGet(List set){ 
        int count=set.size(); 
        for(int i=0;i<count;i++){ 
            System.out.println(set.get(i)); 
            //String str=(String)set.get(i) 
        } 
    }// 
}


====================================map example====================================
import java.util.*; 
public class MapTest { 
    public static void main(String[] args) { 
        HashMap list=new HashMap(); 
        list.put("0","lee"); 
        list.clear();//모두 제거 
        list.put("1","cho"); 
        list.put("2","kim"); 
        list.put("3","chung");
        list.put("4","min"); 
        list.put("3","jung");
        System.out.println(list.size());//size() 
        System.out.println(list.containsKey("3")); 
        list.remove("2"); 
        System.out.println(list.size()); 
 
        print(list);//Set 만들기 
    } 
    public static void print(Map sets){ 
        Set set=sets.keySet();//key값을 Set으로 
        Iterator iter=set.iterator(); 
        while(iter.hasNext()){ 
            String key=(String)iter.next(); 
            System.out.println(key+"  "+sets.get(key));//value 
        } 
    }// 
}  




 * Properties
   - properties파일의 값을 Properties 객체로 로딩할 수 있다.
   - myinfo.properties의 이름, 전화번호, 주소 값을 ProTest2 클래스에서 읽어와서 출력하기
   - properties파일에 한글 인식할 수 있도록  Eclipse 에 플러그인 설치 하기