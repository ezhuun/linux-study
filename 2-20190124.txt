2019.01.24

 * 예외처리(Exception) 
   : 예외는 프로그램 개발시에 발생하는 에러와는 다른 개념
   : 안정적으로 컴파일된 후 운영중에 발생하는 에러는 대부분 "예외"인 경우가 많음

	try{ 
	   에러가 발생할 소지가 있는 코드를 개발자가 선별하여 지정해야 하며 "IO, 
	    DBMS, NETWORK"관련 코드가 대부분입니다. 
	}catch(Exception e){ 
	    예외처리 및 예외처리 원인 출력 
	    System.out.println(e.toString()); 
	}finally{ 
	    무조건 실행되는 코드 블럭, 데이터베이스 연결 종료 등 
	} 

 * IO Stream 
   : Stream은 연속적인 데이타 흐름을 나타낸다
   : 프로그램이 가지고 있는 또는 가지고 있지 않은 데이터를 외부(다른 프로그램)로 보내거나 가져오는 동작
   : Program에서 처리된 데이터     ----------->  모니터, 디스크 장치,네트워크(Destination)  
                                    출력 스트림 

   : 키보드, 디스크 장치, 네트워크  ----------> Program(Destination) 
                                    입력 스트림 
   : 스트림은 단방향 구조

     바이트 단위 처리                                                2바이트 문자단위 
    (한글 처리 불가능)                                               (한글 처리 가능) 
     ------------------------------------------------------------------------------- 
     InputStream                 기본 입력 스트림 클래스             Reader 
     OutputStream                기본 출력 스트림 클래스             Writer 

     FileInputStream             파일 입력 스트림 클래스             FileReader 
     FileOutputStream            파일 출력 스트림 클래스             FileWriter 

     BufferedInputStream         버퍼 입력 기능 클래스               BufferedReader 
     BufferedOutputStream        버퍼 출력 기능 클래스               BufferedWriter 

     DataInputStream             데이터 타입을 지정하여 입력할수 있는 클래스 
     DataOutputStream            데이터 타입을 지정해서 출력할수 있는 클래스 

     ObjectInputStream ois;      Class 객체를 읽어 올 수 있습니다.  
     ObjectOutputStream oos;     Class 객체를 출력 할 수 있습니다.  




 * File 클래스
    : 대표적인 IO Stream
    : 파일의 경로명을 다루는 클래스
    : File 클래스는 파일의 삭제, 디렉터리 생성 등과 같은 파일 관리

<source example>

package coding.day09;

import java.io.File;
import java.util.*;

public class FileDirectoryMakingMain {

	public static void main(String[] args) {
		FileDirectoryMaking fm = new FileDirectoryMaking();
		System.out.println("aaa 디렉토리 생성	: " + fm.make("aaa"));
		System.out.println("bbb 디렉토리 생성	: " + fm.make("bbb"));
		System.out.println("디렉토리명 변경	: " + fm.renameTo("aaa", "ccc"));
		System.out.println("디렉토리 삭제	: " + fm.delete("ccc"));
	}

}




class FileDirectoryMaking {
	public boolean make(String fname) {
		File f = new File(fname);
		if (f.isDirectory() && f.exists()) {
			System.out.println(fname + "가 이미 존재함");
			return false;
		}

		f.setLastModified(new Date().getTime());
		return f.mkdir();
	}

	public boolean renameTo(String fname, String newName) {
		File f = new File(fname);
		if (!f.exists()) {
			System.out.println(fname + "가 없다");
			return false;
		}
		f.setLastModified(new Date().getTime());
		return f.renameTo(new File(newName));
	}

	public boolean delete(String fname) {
		File f = new File(fname);
		if (!f.exists()) {
			System.out.println(fname + "가 없다");
			return false;
		}
		return f.delete();
	}
}



>>> 키보드로 입력한 데이타 받기

    - System.in.read()를 이용합니다. 
    - 문자를 여러번 받아 문자열로 만드는 법을 배운다 
    - new String(byte 배열,시작,끝-2) ; //\n, \r이 붙어있어서 뺌 
     

public class ReadFromSystem1 { 
public static void main(String[] args) { 
byte[] b=new byte[1024]; 
int len=0; 
try{ 
     System.out.println("데이타를 입력하세요"); 
     len=System.in.read(b);  //섹션 102 
     System.out.println(len); 
} 
catch(Exception e){  
     System.out.println("입력실패");  
} 
String str=new String(b,0,len-2); 
System.out.println(str); 
try{ 
    System.out.println("데이타를 입력하세요"); 
    len=System.in.read(b); 
    System.out.write(b, 0, len); 
    System.in.close(); 
} 
catch(Exception e){  
    System.out.println("입력실패");  
} 
} 
} 