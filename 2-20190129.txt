2019.01.29

[01] Thread 
   - Process
     . thread의 집합으로 하나의 exe, com, dll 프로그램을 말한다. 
     . 현재 실행되고 있는 프로그램이다. 
     . Process간 자원(memory)을 공유할 수 없다. 따라서 Process를 많이 발생 시키면 자원이 바닥나게 된다.
  
 - Thread
    . 독립된 작업처리 단위로 프로세스를 구성한다.
    . 반복적으로 동기화하여 실행되는 프로그램 루틴 이다.
    . 메소드(함수)단위의 처리 모듈 이며 process의 구성 요소이다.
    . Thread는 많이 발생해도 자원을 공유함으로 Process에 비해 시스템에 적은 부담이 된다. 
    . 각각의 Thread는 자신의 일을 하고 있으며, 동시에 실행되지 않는다. 
    . 스레드 스케줄러에 의해서 스레드의 여러상태중 실행상태로 변경할 수 있다.
    . 스레드의 상태는 준비상태, 실행상태, 대기상태, 정지상태가 있다.
    . 스레드는 자원을 공유하는 특징이 있어 멤버필드와 static 필드를 공유한다. 
 
 - run()메소드안에 처리로직을 구현하거나 처리로직을 호출하는 로직이 구현되어있다.
 - 네크워크, 게임, 데이터베이스, 웹 관련 프로그램에서 많이 사용된다. 
 - 자바의 스레드는 많은 Reference 참조로 인해 C언어의 스레드보다 속도 및 안정성이 떨어져 접속자가 많은
   네트워크 관련 프로그램에  사용을 하지 않는다. 
   . Hash Code 관리 부분에 많은 리소스가 소모된다.

1. 스레드 콜백 메소드와 기본 메소드  
  - start():  
   . 스레드를 스레드 스케줄러에 등록하고 준비상태에서 실행을 기다린다.
   . 이 메소드를 실행했다고해서 바로 스레드가 실행이 되는 것은 아님
   . JVM은 스레드를 실행할 수 있는 여유가 생겼을 때 자신이 작성한 스레드 스케줄러에 의해서
    스레드의 run()메소드를 호출한다.

 - run(): JVM이 호출하는 콜백메소드로 여기서 콜백 메소드는 개발자가 호출을 코드상에 지시
   하는 것이 아니라 JVM이 호출하는 메소드를 말하는 것으로 이 run()메소드 안에는 스레드 상태
   에서 처리하려고 하는 모든 비즈니스 로직이 구현되어 있어야 하며 가장 중요한 메소드이다. 

 - sleep(long milli second): 지정된 시간동안 스레드를 쉬게하고, 그 시간이 지나면 다시 쓰레드
   가 작동된다. (1000/1초)
 - wait(): 현재를 스레드 무한정 대기 시킵니다. notify(), notifyall() 메소드를 통해서 재 실행 가능. 
 - suspend():스레드의 실행을 일시적으로 중단 시킴,  다시 실행은 resume()를 통해서만 가능. 
 - yield(): 스레드의 실행 권한을 무조건 다른 스레드에게 넘겨 준다.(양보) 
 - stop(): 스레드 실행을 완전히 종료 한다.
 - getName(): 쓰레드의 이름을 알려줍다.
 - Thread.currentThread()는 현재 실행중인 쓰레드를 알려준다. 

2. 단일 스레드: 
 - 하나의 프로세스가 하나의 쓰레드로 실행되는 환경을 말함.
 - main() 메소드가 대표적인 단일 스레드이며, 프로세스에서 디폴트로 할당되는 스레드이다.
 - 모든 프로세스는 최소한 하나의 쓰레드를 가지게 되며 메인 쓰레드에서 더이상 새로운 쓰레드를
   생성하지 않았다면 이 프로세스는 단일 쓰레드 환경이 된다.

3. 멀티 스레드:
 - 하나의 프로세스에 두개 이상의 쓰레드가 존재하는 것을 말함.
 - 하나의 메소드가 처리가 끝나는 것이 아니라 여러 메소드가 계속적으로 실행상태에 있으면서
   자원을 공유하고 이용하는 처리 형태

4. 스레드의 생성 방법 
  - Thread 클래스를 상속받는 방법 
  - Runnable 인터페이스를 구현하는 방법 
   . 자바는 다중 상속이 안됨으로 클래스가 특정 클래스를 상속할 필요가 있는 경우는 반드시
     Runnable인터페이스를 구현해야 한다.  



==================================== 단일 쓰레드 example ====================================
public class ThreadEx6 {
	public static void main(String[] args) {
		String input = JOptionPane.showInputDialog("아무값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다");
		for (int i = 10; i > 0; i--) {
			System.out.println(i);
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
			}
		}
	}
}

==================================== 멀티 쓰레드 example ====================================
public class ThreadEx7 {

	public static void main(String[] args) {
		ThreadEx7_1 th1 = new ThreadEx7_1();

		th1.start();

		String input = JOptionPane.showInputDialog("아무값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다");
	}

}

class ThreadEx7_1 extends Thread {
	public void run() {
		for (int i = 10; i > 0; i--) {
			System.out.println(i);
			try {
				sleep(1000);
			} catch (Exception e) {
			}
		}
	}
}



==================================== 멀티 쓰레드 example ====================================
public class SleepThreadMain {

	public static void main(String[] args) {
		SleepThread t1 = new SleepThread("a");
		SleepThread t2 = new SleepThread("b");
		SleepThread t3 = new SleepThread("c");


		t2.setPriority(7);
		t1.start();
		try {
			t1.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		t2.start();
		t3.start();
	}

}

class SleepThread extends Thread {
	public SleepThread(String name) {
		setName(name);
	}

	@Override
	public void run() {
		show();
	}

	public void show() {
		for (int i = 0; i < 30; i++) {
			print();
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
			}
		}
	}

	public void print() {
		System.out.print(getName());
	}

}