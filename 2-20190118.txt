2019.01.18


 * 접근 한정자 
   : 다른 클래스에서 현재 클래스의 필드(변수)와 메소드(함수)의 접근 가능 여부를 선언하는 기법
   : 객체지향에서 캡슐화를 구현하는 핵심기술
   : 클래스간에 간섭을 막을 수 있음으로 콤포넌트의 독립성을 강화
   : 기본적으로 멤버변수는 모두 private 선언을 권장

 * 접근 제한자 종류
			같은클래스	같은패키지	상송관계의다른패키지	관련없는패키지
   private		    O		    X		    X			    X(중요)
   friendly(default)	    O		    O		    X			    X
   protected		    O		    O		    O			    X
   public		    O		    O		    O			    O(중요)

 *  private method 응용
   : private 메소드가 존재하면 반드시 private 메소드를 호출하는 public 메소드가 존재하게 된다
   : private 메소드는 클래스 외부에서 호출할 수 없다


 * Garbage Collecting
   : 멤버변수와 객체에 할당된 메모리(heap)를 회수
   : JVM이 자동으로 수행
   : 멤버 메소드 등 일반 메소드안에서 생성된 객체가 메소드의 지역변수에서 참조 한다면 메소드 종료시 자동으로 메모리 회수
   : Test test = new Test(); 
   : test = null; //test의 해쉬코드가 지워진다.
   : 메모리를 회수 System.gc() 할때는 자동으로 finalize()메소드가 호출된다.(소멸자) 자동으로 호출되는 메소드를 Callback 메소드라 한다.

 * 상속
   : 상위 클래스의 특성 (필드, 메소드)을 하위 클래스에 물려주는 것
   : public class Student extends Person{} // Person을 상속받는 클래스 Student 선언













