2019.01.31

 * Generics 

   - 객체를 저장하는 기술인 Collection Framework의 단점을 개선한 기능
   - 클래스나 메소드에 자료형을 매개변수 형식으로 사용할 수 있는 기능. 
   - Class ArrayList<E>에서 'E'가 있는 곳에는 ArrayList를 선언하고 생성할 때 사용할 실제타입
   - E는 Element(원소)를 말하며, new ArrayList<String>() 이면 'E'는  'String' 클래스를 가르키며,
   < > 안의 String은 유형 매개 변수 (type parameter)이다. 
     따라서 boolean add(Object o) 메소드는 boolean add(String o) 가 된다. 
   - 'E'는 ArrayList의 인스턴스를 만들때 < > 안에 넣는 타입을 말합니다.



※ Generics 관련 예제 

- 1.4이하의 패턴 

>>>>> Normal.java 

import java.util.ArrayList; 
import java.util.Iterator; 
import java.util.List; 

public class Normal { 

    public static void main(String[] args) { 
        //ArrayList 객체 10개를 저장할 수 있는 list 객체 변수 선언 
        List list = new ArrayList(10); 
         
        list.add(new Integer(10)); //Integer 추가 
        list.add("List Test");     //String 추가 

        //객체배열에서 순차적으로 객체를 추출하기위한 Iterator 객체 생성  
        Iterator i = list.iterator();  
         
        Integer su = (Integer)i.next(); 
        System.out.println("su=" + su); 
         
        String str = (String)i.next(); 
        System.out.println("su=" + str); 
    } 
} 




- 1.4이하에서 문제있는 부분 

>>>>> Generic.java 

import java.util.ArrayList; 
import java.util.Iterator; 
import java.util.List; 

public class Generic { 

    public static void main(String[] args) { 
        //ArrayList 객체 10개를 저장할 수 있는 list 객체 변수 선언 
        ArrayList list = new ArrayList(10); 
         
        list.add(new Integer(10)); //Integer 추가 
        list.add("List Test");     //String 추가 

        //객체배열에서 순차적으로 객체를 추출하기위한 Iterator 객체 생성  
        Iterator i = list.iterator();  
         
        Integer su = (Integer)i.next(); 
        System.out.println("su=" + su); 
         
        su = (Integer)i.next();  //ERROR 강제 발생 부분 
        System.out.println("su=" + su); 
    } 
} 




- generics가 적용된 코드 (compile 시점에 에러가 체크됨 ) 

>>>>> Generic2.java 

import java.util.ArrayList; 
import java.util.Iterator; 
import java.util.List; 

public class Generic2 { 

    public static void main(String[] args) { 
        //선언되는 list는 Integer 클래스 타입만 저장할 수 있습니다. 
        ArrayList<Integer> list = new ArrayList<Integer>(10); 
        list.add(new Integer(10)); 
         
        //ERROR 강제 발생 부분, Integer 타입만 가능,  
        //Design Time에서 발견됩니다. 
        list.add("List Test");  

        Iterator i = list.iterator();  
        Integer su = (Integer)i.next(); 
        System.out.println("su=" + su); 
         
        su = (Integer)i.next(); 
        System.out.println("su=" + su); 
    } 
} 




- Generic 클래스  
   . 제네릭 클래스는 형 매개변수(type parameter)를 가지는 클래스입니다. 
   . 형매개변수는 객체가 생성시 전달받으며 속성이나 메소드의 자료형으로 
     사용됩니다. 

  [정의] 
   class Classname<type parameter>{ 
           // .... class body 
   } 

>>>> GenericClassExample.java 

class SimpleGeneric<T> { 
private T[] values; 
private int index; 
SimpleGeneric(int len) { // Constructor 
values = (T[])new Object[len]; 
index = 0; 
} 
public void add(T ... args) { 
for (T e : args) 
values[index++] = e; 
} 
public void print() { 
for (T e : values) 
System.out.print(e + " "); 
System.out.println(); 
} 
} 
 
public class GenericClassExample { 
public static void main(String[] args) { 
SimpleGeneric<Integer> gInteger = new SimpleGeneric<Integer>(10); 
SimpleGeneric<Double> gDouble = new SimpleGeneric<Double>(10); 
gInteger.add(1, 2); 
gInteger.add(1, 2, 3, 4, 5, 6, 7); 
gInteger.add(0); 
gInteger.print(); 
gDouble.add(10.0, 20.0, 30.0); 
gDouble.print(); 
} 
} 



 >>>> MultipleTypeParam.java 


class Price<N, V> { 
private N[] names; 
private V[] values; 
private int index; 
Price(int size) { 
names = (N[])new Object[size]; 
values = (V[])new Object[size]; 
index = 0; 
} 
public void insert(N n, V v) { 
names[index] = n; 
values[index] = v; 
++index; 
} 
public void print() { 
for (int i = 0; i < index; i++) 
System.out.println(names[i] + " : " + values[i]); 
} 
} 
 
public class MultipleTypeParam { 
public static void main(String[] args) { 
Price<String, Integer> p1 = new Price<String, Integer>(10); 
Price<String, Double> p2 = new Price<String, Double>(10); 
p1.insert("Apple", 1200); 
p1.insert("Banana", 2000); 
p1.insert("Grape", 4500); 
p2.insert("USD", 943.0); 
p2.insert("JPY", 822.86); 
p2.insert("EUR", 1273.05); 
System.out.println("*** Fruit Price ***"); 
p1.print(); 
System.out.println("*** Exchange Rate ***"); 
p2.print(); 
} 
} 



- Generic 인터페이스  
   . 클래스와 마찬가지로 형 매개변수를 가지는 제네릭 인터페이스를 선언합니다. 


  [정의] 
   interface InterfaceName<type parameter>{ 
           // .... interface body 
   } 


>>>> GenericInterfaceExample.java 


interface GenericInterface<T> { 
public void setValue(T x); 
public String getValueType(); 
} 

class GenericClass<T> implements GenericInterface<T> { 
private T value; 
public void setValue(T x) { 
value = x; 
} 
public String getValueType(){ 
return value.getClass().toString(); 
} 
} 
 
public class GenericInterfaceExample { 
public static void main(String[] args) { 
GenericClass<Integer> gInteger = new GenericClass<Integer>(); 
GenericClass<String> gString = new GenericClass<String>(); 
gInteger.setValue(10); 
gString.setValue("Text"); 
System.out.println(gInteger.getValueType()); 
System.out.println(gString.getValueType()); 
} 
} 





- Generic 메소드 
  .  자바에서 제네릭 프로그램의 단위에는 클래스와 인터페이스, 그리고 
     메소드가 있습니다.  

  [정의] 
   <type parametr>return_type MethodName<parameter>{ 
           // .... method body 
   } 



>>>> GenericMethodExample.java 

public class GenericMethodExample { 
public static <T> void printArgInfo(T arg) { 
System.out.print("Argument Type is " + arg.getClass()); 
System.out.println(" / Value is " + arg.toString()); 
} 
public static void main(String[] args) { 
Integer i = new Integer(10); 
char c = 'A'; 
float f = 3.14f; 
printArgInfo(i); // <Integer> void printArgInfo(Integer) 
printArgInfo(c); // <Character> void printArgInfo(Character) 
printArgInfo(f); // <Float> void printArgInfo(Float) 
} 
} 


- 제네릭 클래스와 제네릭 메소드를 모두 가지고 있는 경우 


>>>>> NestedGenericMethodExample.java 

class GenericClass <T> { 
public void printMethodArgInfo(T arg) { 
System.out.print("Argument Type is " + arg.getClass()); 
System.out.println(" / Value is " + arg.toString()); 
} 
public <T> void printGenericMethodArgInfo(T arg) { 
System.out.print("Argument Type is " + arg.getClass()); 
System.out.println(" / Value is " + arg.toString()); 
} 
} 
public class NestedGenericMethodExample { 
public static void main(String[] args) { 
GenericClass<String> gc = new GenericClass<String>(); 
gc.printGenericMethodArgInfo(10L); 
gc.printGenericMethodArgInfo('A'); 
//gc.printMethodArgInfo(10L); // error 
} 
}








================================================================================
 * Database 와 일반 Data의 차이점 
   - 데이터의 중복을 막을 수 있고 자료의 일관성을 유지할 수있다. 
   - 데이터를 쉽게 검색 할 수 있다. 
   - 데이터의 통합이 쉽다. (서류 찾는 일) 
   - 여러 사람이 함께 자료를 열람 할 수 있다. 
   - 데이터에 보안을 적용 하기가 쉽다. 


 * 테이블(엔티티)의 구조
   - 2차원 배열의 형태를 가지고 있습니다. 
   - record는 column의 집합입니다. 
   - table(entity)은 record의 집합입니다. 
   - database는 계정과 테이블의 집합입니다. 
   - field: 컬럼의 값 
   - domain: field의 범위 

   number   wdate       subject      passwd   <----- 컬럼, Attribute(논리적 모델링) 
   ----------------------------------------- 
   1        2005-01-01  안녕하세요.  123      <----- 레코드, 행, Tupple(논리적 모델링)  
   2        2005-01-02  반갑습니다.  123$ 
   3        2005-01-01  안녕하세요.  123 
   4        2005-01-02  반갑습니다.  123$ 
   5        2005-01-01  안녕하세요.  123 
   6        2005-01-02  반갑습니다.  123$ 
             ↑                ↖  
             │                  테이블(Entity)   
             └------------------------------------- field  


 * SQL 언어의 종류 
  - ANSI SQL92, 99에 기준하여 각 데이터베이스상에서 SQL을 사용할 수 있습니다. 

  - DQL(Data Query Language), 데이터 질의어, 데이터 검색, 출력과 관련된 쿼리 
    . SELECT..FROM..WHERE 

  - DML(Data Manapulation Language), 데이터 조작어, 데이터 입력, 수정, 삭제와 관련된 쿼리 
    . INSERT, UPDATE, DELETE 

  - DDL(Data Definition Language), 데이터 정의어, 테이블 생성 및 삭제, 테이블 구조 수정과 관련된 쿼리 
    . CREATE TABLE, DROP TABLE, ALTER TABLE 

  - TCL(Transaction Control Language), 트랜잭션 제어 언어, 안정적인 데이터 처리를 위한 데이터 처리와 
    관련된 명령어 
    . COMMIT, ROLLBACK, SAVEPOINT 

  - DCL(Data Control Language)데이터 제어 언어, 권한 부여와 관련된 쿼리 
    . GRANT, REVOKE 





 * 테이블을 만들기 위한 MySQL 컬럼의 데이터 타입 

1. 숫자형 : tinyint   1 -128 ~ 127 
            smallint  2 -32768 ~ 32767        
            mediumint 3 -8388608 ~ 8388607 
            int       4 -2147483648 ~ 2147483647 
            integer   4 
            bigint    8 
            float     4 -10^38 ~ 10^38-1  
            double    8 -10^308 ~ 10^308-1  
            double precision, real, decimal 8 


2. 문자형   
   - CHAR(m)   : 1~255개의 문자 지정, 고정 길이문자, 메모리 낭비가 심함, 
                 속도는 고속, 크기가 고정되어 있는 내용 대상, 코드값 
   - VARCHAR(m): 1~255개의 가변 길이 문자 지정, 가변 길이 캐릭터,  
                 메모리 재사용, 속도는 늦음, 크기가 가변적인 내용 대상 
                . title VARCHAR(100): 제목 내용이 10바이트만 사용되면 char와는 다르게 
                  나머지 90바이트는 재사용합니다. 
   - TEXT: 65535개의 문자 지정 가능 
   - MEDIUMTEXT: 16777215개의 문자 지정 
   - LONGTEXT: 4GB의 문자 지정 


3. 날짜형 : DATETIME  8 
            DATE      3  
            TIMESTAMP(8) yyyymmdd 


4. auto_increment 
   - 레코드를 고유하게 구분하는 역활을 합니다. 
   - 순서대로 정수형 일련번호를 만들어 줍니다. 
   - MSSQL의 IDENTITY(1,1), ORACLE의 SEQUENCE와 같음 
   - 칼럼의 타입은 정수형이어야 한다. 
   - NOT NULL이어야 한다. 반드시 값을 입력해야 한다는 조건입니다. 
   - PRIMARY KEY이어야 한다. 중복된 값이 입력되면 안됩니다. 


